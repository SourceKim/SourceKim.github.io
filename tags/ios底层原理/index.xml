<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iOS底层原理 on Kim's Blog</title><link>https://www.uiimage.com/tags/ios%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</link><description>Recent content in iOS底层原理 on Kim's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>18666269733@163.com (Kim)</managingEditor><webMaster>18666269733@163.com (Kim)</webMaster><lastBuildDate>Tue, 30 Jun 2020 18:20:35 +0800</lastBuildDate><atom:link href="https://www.uiimage.com/tags/ios%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>iOS SideTables</title><link>https://www.uiimage.com/post/blog/ios/sidetables/</link><pubDate>Tue, 30 Jun 2020 18:20:35 +0800</pubDate><author>18666269733@163.com (Kim)</author><guid>https://www.uiimage.com/post/blog/ios/sidetables/</guid><description>&lt;p>SideTables 是 Runtime 中的一个数据结构，用以保存 &lt;strong>全局的引用技术表&lt;/strong> 和 &lt;strong>全局弱引用表&lt;/strong>。&lt;/p></description></item><item><title>编译 &amp; 加载 原理</title><link>https://www.uiimage.com/post/blog/ios/compile-principle/</link><pubDate>Sat, 26 Oct 2019 14:20:35 +0800</pubDate><author>18666269733@163.com (Kim)</author><guid>https://www.uiimage.com/post/blog/ios/compile-principle/</guid><description>&lt;p>我们所写的代码是一个 &lt;code>XCode&lt;/code> 的工程，在按下 &lt;code>command + r&lt;/code> 之时，会将其 &lt;code>编译&lt;/code> 成 &lt;code>MACH-O&lt;/code> 可执行文件；然后放到手机上，再点击应用的时候，系统的内核会开启一个进程，然后通过 &lt;code>dyld&lt;/code> 执行 &lt;code>加载&lt;/code> 流程。&lt;/p></description></item><item><title>iOS 中 weak 详细介绍</title><link>https://www.uiimage.com/post/blog/ios/weak/</link><pubDate>Wed, 08 May 2019 23:00:00 +0800</pubDate><author>18666269733@163.com (Kim)</author><guid>https://www.uiimage.com/post/blog/ios/weak/</guid><description>&lt;p>&lt;code>Runtime&lt;/code> 为我们维护了一张&lt;strong>全局&lt;/strong>的 &lt;code>weak 表（弱引用表）&lt;/code>，是一张 &lt;code>哈希表&lt;/code>，该表的 &lt;code>key&lt;/code> 是要弱引用的对象的地址， &lt;code>value&lt;/code> 是所有指向该对象的 &lt;code>weak&lt;/code> 指针，是一个数组。&lt;/p></description></item><item><title>Hash isEqual == 的区别和联系</title><link>https://www.uiimage.com/post/blog/ios/hash-isequal/</link><pubDate>Fri, 12 Apr 2019 13:12:00 +0800</pubDate><author>18666269733@163.com (Kim)</author><guid>https://www.uiimage.com/post/blog/ios/hash-isequal/</guid><description>&lt;p>在 OC 中：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>hash&lt;/code> 的类型是 &lt;code>NSUInteger&lt;/code>，可以初步用来判等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>isEqual&lt;/code> 是相等的绝对判定&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>==&lt;/code> 仅是对比变量地址的指针是否相等&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>iOS 中 Runtime 详细介绍</title><link>https://www.uiimage.com/post/blog/ios/runtime/</link><pubDate>Mon, 04 Mar 2019 22:00:00 +0800</pubDate><author>18666269733@163.com (Kim)</author><guid>https://www.uiimage.com/post/blog/ios/runtime/</guid><description>&lt;p>Runtime，运行时的库，是一套使用 C 和汇编的 API，因为 runtime 使得 OC 可以成为一个动态语言。平时我们定义的对象，大多都是编译后就是 runtime 的 &lt;code>objc_class&lt;/code> 结构体；我们调用方法，编译之后会变成 &lt;code>objc_msgSend:&lt;/code>，也就是通过给对象发送消息来调用方法，方法实际的实现在运行时才能被确定。&lt;/p></description></item><item><title>Block 原理 &amp; 本质</title><link>https://www.uiimage.com/post/blog/ios/block/</link><pubDate>Thu, 17 Jan 2019 18:20:35 +0800</pubDate><author>18666269733@163.com (Kim)</author><guid>https://www.uiimage.com/post/blog/ios/block/</guid><description>&lt;p>iOS 的 &lt;code>block&lt;/code> 本质上也是一个 OC 的对象，是一个拥有 &lt;code>isa&lt;/code> 指针的结构体，能够捕获外部变量的值、指针地址。&lt;/p></description></item><item><title>iOS 中 Runloop 详细介绍</title><link>https://www.uiimage.com/post/blog/ios/runloop/</link><pubDate>Fri, 04 Jan 2019 23:00:00 +0800</pubDate><author>18666269733@163.com (Kim)</author><guid>https://www.uiimage.com/post/blog/ios/runloop/</guid><description>&lt;p>为了维持程序中任务的持续进行，iOS 中采用 Runloop 这种方式。&lt;/p></description></item><item><title>iOS 中锁的探究</title><link>https://www.uiimage.com/post/blog/ios/lock/</link><pubDate>Thu, 03 Aug 2017 23:00:00 +0800</pubDate><author>18666269733@163.com (Kim)</author><guid>https://www.uiimage.com/post/blog/ios/lock/</guid><description>&lt;p>iOS 中的锁分为：互斥锁、递归锁、条件锁、自旋锁等。&lt;/p></description></item><item><title>iOS 的 架构 &amp; 寄存器（register）</title><link>https://www.uiimage.com/post/blog/ios/register/</link><pubDate>Thu, 03 Aug 2017 23:00:00 +0800</pubDate><author>18666269733@163.com (Kim)</author><guid>https://www.uiimage.com/post/blog/ios/register/</guid><description>&lt;p>包括所有架构的介绍和部分寄存器的作用。&lt;/p></description></item><item><title>iOS 的 KVO &amp; KVC 本质</title><link>https://www.uiimage.com/post/blog/ios/kvokvc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>18666269733@163.com (Kim)</author><guid>https://www.uiimage.com/post/blog/ios/kvokvc/</guid><description>&lt;ul>
&lt;li>
&lt;p>KVO：监听属性的变化&lt;/p>
&lt;/li>
&lt;li>
&lt;p>KVC：属性（成员变量）设值&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>